{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["PersonForm","handleSubmit","newName","newNumber","nameInput","numberInput","onSubmit","value","onChange","type","Persons","persons","filter","handleDelete","display","search","name","toLowerCase","includes","map","person","number","id","onClick","Filter","newFilter","filterInput","Notification","message","style","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notification","setNotification","notificationType","setNotificationType","useEffect","personService","initialPersons","e","target","preventDefault","some","window","confirm","personToUpdate","updated","updatePerson","personsUpdate","indexOf","setTimeout","catch","error","returnedPersons","concat","dataset","personId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e81b732f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = ({handleSubmit, newName, newNumber, nameInput, numberInput}) => {\r\n    return (\r\n      <div>\r\n          <form onSubmit={handleSubmit}>\r\n          <div>\r\n            Name: <input value={newName} onChange={nameInput} />\r\n          </div>\r\n          <div>\r\n            Number: <input value={newNumber} onChange={numberInput} />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n          </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react'\r\n\r\nconst Persons = ({persons, filter, handleDelete}) => {\r\n    const display = persons.filter(search => search.name.toLowerCase().includes(filter.toLowerCase()))\r\n    .map(person => {\r\n      return ( \r\n        <li key={person.name}>\r\n            {person.name}: {person.number} &nbsp;\r\n            <button id={person.id} data-name={person.name} onClick={handleDelete}>Delete</button>\r\n        </li>\r\n      )\r\n    })\r\n  \r\n    return (\r\n        <ul>\r\n            {display}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Persons;","import React from 'react'\r\n\r\nconst Filter = ({newFilter, filterInput}) => {\r\n    return (\r\n      <div>\r\n          Filter shown with <input value={newFilter} onChange={filterInput} />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\nconst Notification = ({ message, style }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={style}>\r\n        {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst updateNumber = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, updateNumber, deletePerson}","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notification, setNotification ] = useState()\n  const [ notificationType, setNotificationType ] = useState()\n\n\n  // Persons form\n  const nameInput = (e) => {setNewName(e.target.value)}\n  const numberInput = (e) => {setNewNumber(e.target.value)}\n\n\n  // Filter\n  const filterInput = (e) => {setNewFilter(e.target.value)}\n\n\n  // List Persons from database\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  \n  // Add new entry / Update existing number\n  const handleNewEntry = (e) => {\n    e.preventDefault()\n    // Check if the name already exist\n    const isPersonExist = persons.some(person => person.name.toLowerCase() === newName.toLowerCase())\n\n    // If name doesn't exist\n    if (!isPersonExist) {\n      // Create new object for the new entry\n      const newEntry = {\n        name: newName,\n        number: newNumber\n      }\n\n      // Add new entry to the database\n      personService\n        .create(newEntry)\n        .then(returnedPersons => {\n          // Update states for the display\n          setPersons(persons.concat(returnedPersons))\n          setNewName('')\n          setNewNumber('')\n          setNotification(`Added ${newName}`)\n          setNotificationType('notification')\n          setTimeout(() => {\n            setNotification(null)\n            setNotificationType(null)\n          }, 5000)\n        })\n    \n    // If name already exist\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const personToUpdate = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())\n        const id = personToUpdate[0].id;\n        const updated = {...personToUpdate[0], number: newNumber}\n\n        // Update the number in the database\n        personService\n          .updateNumber(id, updated)\n          .then(updatePerson => {\n            // Update states for the display\n            const personsUpdate = [...persons]\n            const personIndex = persons.map(person => person.name.toLowerCase()).indexOf(newName.toLowerCase())\n            personsUpdate[personIndex] = updatePerson            \n            \n            setPersons(personsUpdate)\n            setNewName('')\n            setNewNumber('')\n            setNotification(`Phone number updated`)\n            setNotificationType('notification')\n            setTimeout(() => {\n              setNotification(null)\n              setNotificationType(null)\n            }, 5000)          \n          })\n          // If the user already removed\n          .catch(error => {\n            setNotification(`Information of ${personToUpdate[0].name} has already been removed from server`)\n              setNotificationType('warning')\n              setTimeout(() => {\n                setNotification(null)\n                setNotificationType(null)\n              }, 5000)\n          })\n      }\n    }\n  }\n\n  \n  // Delete an entry\n  const handleDelete = (e) => {\n    const id = e.target.id    \n    if (window.confirm(`Delete ${e.target.dataset.name}?`)) {\n      // Delete from the database\n      personService\n      .deletePerson(id)\n      .then(() => {\n        // Update states for the display\n        setPersons(persons.filter(personId => personId.id !== id))\n      })\n      // If the user already removed\n      .catch(error => {\n        setNotification(`Information of ${e.target.dataset.name} has already been removed from server`)\n          setNotificationType('warning')\n          setTimeout(() => {\n            setNotification(null)\n            setNotificationType(null)\n          }, 5000)\n      })      \n    }    \n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} style={notificationType} />\n\n      <Filter newFilter={newFilter} filterInput={filterInput} />\n      \n      <h3>Add a new</h3>\n      <PersonForm\n        handleSubmit={handleNewEntry}\n        newName={newName}\n        newNumber={newNumber}\n        nameInput={nameInput}\n        numberInput={numberInput}\n      />\n\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={newFilter} handleDelete={(e) => handleDelete(e)} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}